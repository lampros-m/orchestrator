// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/run": {
            "get": {
                "description": "This endpoint tries to run all the executables that are set in the orchestrator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orchestrator"
                ],
                "summary": "Run all the executables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.RunResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.RunResponse"
                        }
                    }
                }
            }
        },
        "/set": {
            "get": {
                "description": "This endpoint sets the executables in the orchestrator. In order to set the executables again, all processes must be stopped and unset.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orchestrator"
                ],
                "summary": "Set the executables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.SetResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.SetResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "This endpoint returns the status of the executables that are set in the orchestrator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orchestrator"
                ],
                "summary": "Return the status of the executables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/orchestrator.Status"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.StatusResponse"
                        }
                    }
                }
            }
        },
        "/stopall": {
            "get": {
                "description": "This endpoint tries to stop all the executables that are set in the orchestrator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orchestrator"
                ],
                "summary": "Stops all the executables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.StopAllResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.StopAllResponse"
                        }
                    }
                }
            }
        },
        "/unset": {
            "get": {
                "description": "This endpoint unsets the executables in the orchestrator. In order to unset the executables, all processes must be stopped.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orchestrator"
                ],
                "summary": "Unset the executables",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.UnsetResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.UnsetResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.RunResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dtos.SetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dtos.StatusResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dtos.StopAllResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dtos.UnsetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "orchestrator.Status": {
            "type": "object",
            "properties": {
                "auto_restart": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pid": {
                    "type": "integer"
                },
                "running": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "orchestrator-api",
	Description:      "This is an API that controls running processes.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
